import React from 'react';

import {
  ApolloClient,
  ApolloProvider,
  ApolloLink,
  HttpLink,
  InMemoryCache,
} from '@apollo/client';
import { onError } from '@apollo/link-error';
import { setContext } from '@apollo/link-context';

import { useAuth } from './Auth';
import { version } from '../package.json';

const httpLink = new HttpLink({
  uri: '/graphql',
});

const errorLink = onError(({ graphQLErrors, networkError }) => {
  if (graphQLErrors)
    graphQLErrors.forEach(({ message, locations, path }) =>
      console.error(
        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`
      )
    );
  if (networkError) console.error(`[Network error]: ${networkError}`);
});

const App = (props) => {
  const auth = useAuth();

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: auth.isAuthenticated()
          ? `Bearer ${auth.getAccessToken()}`
          : '',
      },
    };
  });

  const cache = new InMemoryCache({
    typePolicies: {
      Loo: {
        keyFields(obj, context) {
          // We specify this explicitally in case Apollo change how ids are autogenerated
          // in the future
          return 'Loo:' + obj.id;
        },
      },
    },
  });

  const client = new ApolloClient({
    name: '@toiletmap/explorer',
    version: version,
    link: ApolloLink.from([errorLink, authLink, httpLink]),
    connectToDevTools: true,
    cache,
  });

  return <ApolloProvider client={client} children={props.children} />;
};

export default App;
